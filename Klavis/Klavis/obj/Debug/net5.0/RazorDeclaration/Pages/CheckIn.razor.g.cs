// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Klavis.Pages
{
    #line hidden
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\OneDrive\Documents\GitHub\klavis-web\Klavis\Klavis\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\OneDrive\Documents\GitHub\klavis-web\Klavis\Klavis\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\OneDrive\Documents\GitHub\klavis-web\Klavis\Klavis\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\OneDrive\Documents\GitHub\klavis-web\Klavis\Klavis\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\OneDrive\Documents\GitHub\klavis-web\Klavis\Klavis\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\OneDrive\Documents\GitHub\klavis-web\Klavis\Klavis\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\OneDrive\Documents\GitHub\klavis-web\Klavis\Klavis\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\OneDrive\Documents\GitHub\klavis-web\Klavis\Klavis\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\OneDrive\Documents\GitHub\klavis-web\Klavis\Klavis\_Imports.razor"
using Klavis;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\OneDrive\Documents\GitHub\klavis-web\Klavis\Klavis\_Imports.razor"
using Klavis.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\OneDrive\Documents\GitHub\klavis-web\Klavis\Klavis\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\OneDrive\Documents\GitHub\klavis-web\Klavis\Klavis\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\OneDrive\Documents\GitHub\klavis-web\Klavis\Klavis\Pages\CheckIn.razor"
using Google.Cloud.Firestore;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\OneDrive\Documents\GitHub\klavis-web\Klavis\Klavis\Pages\CheckIn.razor"
using System;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/checkin")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class CheckIn : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 52 "D:\OneDrive\Documents\GitHub\klavis-web\Klavis\Klavis\Pages\CheckIn.razor"
       
    FirestoreDb fireStoreDb;
    private string security_key_path = "wwwroot/klavis-4b8d1-eb6f81dfbefe.json";
    private string userID;
    private string idField;
    private string terminal;
    private string terminalList;
    private string firstName;
    private string lastName;
    private string picturePath;
    private string accessPicturePath;
    private string accessIcon = "lock_outline";
    private string connection = "Disconnected";
    private bool accountStatus;
    private bool accessStatus;
    private List<string> terminals;




    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Connecting");
        string filepath = "wwwroot/klavis-4b8d1-eb6f81dfbefe.json";
        Environment.SetEnvironmentVariable("GOOGLE_APPLICATION_CREDENTIALS", filepath);
        fireStoreDb = FirestoreDb.Create("klavis-4b8d1");

        DocumentReference userRef = fireStoreDb.Collection("access").Document("designlab");
        DocumentSnapshot snapshot = await userRef.GetSnapshotAsync();
        if (snapshot.Exists)
        {
            connection = "Connected";
        }
        queryTerminals();
        StateHasChanged();
    }


    void OnError(UploadErrorEventArgs args, string name)
    {
        Console.WriteLine($"{args.Message}");
    }



    async void sendQuery(string id, string terminal)
    {
        if(id.Length == 8)
        {

            //Checkling User database
            DocumentReference userRef = fireStoreDb.Collection("users").Document(id);
            DocumentSnapshot snapshot = await userRef.GetSnapshotAsync();
            if (snapshot.Exists)
            {
                Dictionary<string, object> userDictionary = snapshot.ToDictionary();
                firstName = (string) userDictionary["firstname"];
                lastName = (string) userDictionary["lastname"];
                picturePath = (string) userDictionary["pictureLink"];
                accountStatus = (bool) userDictionary["accountStatus"];
                userID = id;
            }
            else
            {
                accountStatus = false;
                firstName = "User not found.";
                lastName = "";
                picturePath = "https://img.search.brave.com/rsnQ2b5ZdZ5NqitJ3pIBqo_yylEga-fOE4uba4Zaq_8/rs:fit:512:512:1/g:ce/aHR0cHM6Ly9jcmlj/ZGFkZHkuY29tL3dw/LWNvbnRlbnQvdXBs/b2Fkcy8yMDIwLzA4/L2JsYW5rLXByb2Zp/bGUtcGljdHVyZS1w/bmcucG5n";
            }

            //Checking Access database
            userRef = fireStoreDb.Collection("access").Document(terminal).Collection("users").Document(id);
            snapshot = await userRef.GetSnapshotAsync();
            accessStatus = snapshot.Exists;

            if(accessStatus && accountStatus)
            {
                accessIcon = "lock_open";
            }
            else
            {
                accessIcon = "lock";
            }

            idField = "";
            StateHasChanged();

            //Logging request
            Dictionary<string, object> log = new Dictionary<string, object>
            {
                { "accessStatus",  accessStatus },
                { "accountStatus", accountStatus },
                { "id", userID },
                { "terminal", terminal },
                { "firstname", firstName },
                { "lastname", lastName },
                { "determination", (accessStatus && accountStatus) },
                { "timestamp", DateTime.UtcNow }
            };
            DocumentReference addedDocRef = await fireStoreDb.Collection("history").AddAsync(log);
        }


    }

    async void queryTerminals()
    {
        List<string> terms = new List<string>();
        CollectionReference terminalRef = fireStoreDb.Collection("access");
        QuerySnapshot userQuerySnapshot = await terminalRef.GetSnapshotAsync();
        foreach (DocumentSnapshot document in userQuerySnapshot.Documents)
        {
            terms.Add(document.Id);
        }
        terminals = terms;
        StateHasChanged();
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
