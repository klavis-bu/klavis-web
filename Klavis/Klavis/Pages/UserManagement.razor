@page "/usermanagement"

@using Google.Cloud.Firestore;
@using System;
@using Klavis.Models;
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@inject DialogService DialogService
@inject IJSRuntime JsRuntime

<PageTitle>User Management</PageTitle>

@if (users == null)
{
    <div class="flex-image">
        <RadzenImage Path=@bufferingImage Style="width: 200px; height: 200px;" />
    </div>
}
else
{
    <h5>Add, remove, and modify user access permissions here.</h5>
    <div class="flex-row">
        <div class="flex-col">
            <RadzenCard Style="background-image: linear-gradient(180deg, #d1b4d4 75px, #eeeeee 100px);  margin: 10px;">
                <div class="flex-row">
                    <div class="flex-controls">
                        <RadzenButton Click=@addUser Icon="note_add" ButtonStyle="ButtonStyle.Light" Style="margin-top: 10px;" />
                    </div>

                </div>
                <br />
                <div class="row" style="margin-top: 10px">
                    <RadzenDataGrid @ref="usersGrid" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true"
                                Data="@userList" TItem="User">
                        <Columns>
                            <RadzenDataGridColumn Width="50px" TItem="User" Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                                <HeaderTemplate>
                                    <b>#</b>
                                </HeaderTemplate>
                                <Template Context="data">
                                    <h6 class="mt-1 mb-0">@(userList.IndexOf(data) + 1)</h6>
                                </Template>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="User" Property="firstName" Title="User">
                                <HeaderTemplate>
                                    <p class="text-capitalize"> <b>User</b></p>
                                </HeaderTemplate>
                                <Template Context="User">
                                    <RadzenImage Path=@((string) @User.pictureLink) Class="rounded-circle float-left mr-3" Style="width: 40px; height: 40px; border-radius: 8px; margin-right: 8px; float: left;" />
                                    <h6 class="mt-1 mb-0">@User.firstName @User.lastName</h6>
                                    <p class="m-0" style="font-size: 0.8em;">@User.userID</p>
                                </Template>

                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="User" Title="Add Card" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                                <HeaderTemplate>
                                    <p class="text-capitalize"> <b>Add Card</b></p>
                                </HeaderTemplate>
                                <Template Context="User">

                                    @if (string.IsNullOrWhiteSpace(User.cardSerial))
                                    {
                                        <RadzenButton Click=@(args => createCard((string) @User.userID)) Icon="credit_card" ButtonStyle="ButtonStyle.Light" Style="color: red" />
                                    }
                                    else
                                    {
                                        <RadzenButton Click=@(args => createCard((string) @User.userID)) Icon="credit_card" ButtonStyle="ButtonStyle.Light" />
                                    }
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="User" Title="Modify" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                                <HeaderTemplate>
                                    <p class="text-capitalize"> <b>Modify</b></p>
                                </HeaderTemplate>
                                <Template Context="User">
                                    <RadzenButton Click=@(args => editUser((string) @User.userID)) Icon="build" ButtonStyle="ButtonStyle.Light" />
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="User" Title="Delete" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                                <HeaderTemplate>
                                    <p class="text-capitalize"> <b>Delete</b></p>
                                </HeaderTemplate>
                                <Template Context="User">
                                    <RadzenButton Click=@(args => deleteUser((string) @User.userID)) Icon="delete" ButtonStyle="ButtonStyle.Light" />
                                </Template>
                            </RadzenDataGridColumn>

                        </Columns>
                    </RadzenDataGrid>

                </div>

            </RadzenCard>

        </div>
    </div>

}


@code {

    FirestoreDb fireStoreDb;
    private string security_key_path = "wwwroot/klavis-4b8d1-eb6f81dfbefe.json";
    private string userID;
    private string terminal;
    private string terminalList;
    private string firstName;
    private string lastName;
    private string picturePath;
    private Google.Cloud.Firestore.Timestamp timestamp;
    private string connection = "Disconnected";
    private bool accessStatus;
    private bool accountStatus;
    private List<Dictionary<string, object>> users = null;
    private string bufferingImage = "loading-buffering.gif";
    RadzenDataGrid<User> usersGrid;

    List<User> userList = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Connecting");
        string filepath = "wwwroot/klavis-4b8d1-eb6f81dfbefe.json";
        Environment.SetEnvironmentVariable("GOOGLE_APPLICATION_CREDENTIALS", filepath);
        fireStoreDb = FirestoreDb.Create("klavis-4b8d1");

        DocumentReference userRef = fireStoreDb.Collection("access").Document("designlab");
        DocumentSnapshot snapshot = await userRef.GetSnapshotAsync();
        if (snapshot.Exists)
        {
            connection = "Connected";
        }
        queryUsers();
        StateHasChanged();
    }

    async void queryUsers()
    {
        Google.Cloud.Firestore.Query userQuery = fireStoreDb.Collection("users");
        QuerySnapshot userQuerySnapshot = await userQuery.GetSnapshotAsync();
        List<Dictionary<string, object>> records = new List<Dictionary<string, object>>();
        foreach (DocumentSnapshot documentSnapshot in userQuerySnapshot.Documents)
        {
            Dictionary<string, object> recordDictionary = documentSnapshot.ToDictionary();
            recordDictionary.Add("id", documentSnapshot.Id);
            records.Add(recordDictionary);
        }
        users = records;

        userList = records.Select(r => new User
            {
                firstName = r["firstname"].ToString(),
                lastName = r["lastname"].ToString(),
                pictureLink = r["pictureLink"] != null ? r["pictureLink"].ToString() : string.Empty,
                cardSerial = r["cardSerial"] != null ?  r["cardSerial"].ToString() : string.Empty,
                userID = r["id"].ToString()
            }).ToList();
        StateHasChanged();

    }

    async void clearHistory()
    {
        QuerySnapshot snapshot = await fireStoreDb.Collection("history").Limit(64).GetSnapshotAsync();
        IReadOnlyList<DocumentSnapshot> documents = snapshot.Documents;
        while (documents.Count > 0)
        {
            foreach (DocumentSnapshot document in documents)
            {
                await document.Reference.DeleteAsync();
            }
            snapshot = await fireStoreDb.Collection("history").Limit(64).GetSnapshotAsync();
            documents = snapshot.Documents;
        }
        StateHasChanged();
    }

    async void addUser()
    {
        //NavigationManager.NavigateTo("/adduser");

        await DialogService.OpenAsync<AddUser>("Add User",
               null,
               new DialogOptions() { Resizable = true, Draggable = true });
        queryUsers();
        StateHasChanged();
    }


    async void deleteUser(string id)
    {
        DocumentReference userRef = fireStoreDb.Collection("users").Document(id);
        await userRef.DeleteAsync();
        queryUsers();
        StateHasChanged();
    }
    async void editUser(string id)
    {
        //NavigationManager.NavigateTo(("/edituser/"+id));

        await DialogService.OpenAsync<EditUser>("Edit User",
               new Dictionary<string, object>() { { "targetID", id } },
               new DialogOptions() { Resizable = true, Draggable = true, Width = "800px" });
        queryUsers();
        StateHasChanged();
    }

    async void createCard(string id)
    {
        string url = "https://www.originpass.com/BU/";
        await jsRuntime.InvokeAsync<object>("open", url, "_blank");
    }
}