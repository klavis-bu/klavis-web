@page "/usermanagement"

@using Google.Cloud.Firestore;
@using System;
@using Klavis.Models;
@inject NavigationManager NavigationManager

<PageTitle>User Management</PageTitle>

<h1>User Management</h1>

Add, remove, and modify user access permissions here.

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class = "row">
            <button class="btn btn-primary" @onclick=@addUser>Add User</button>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Name</th>
                <th>ID</th>
                <th>Modify</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Dictionary<string,object> user in users)
            {
                <tr>
                    <td><RadzenImage Path=@((string) user["pictureLink"]) Class="rounded-circle float-left mr-3" Style="width: 100px; height: 100px;" /></td>
                    <td>@(user["firstname"] + " " + user["lastname"])</td>
                    <td>@user["id"]</td>
                    <td><RadzenButton Click=@(args => editUser((string) user["id"])) Icon="build" ButtonStyle="ButtonStyle.Light" /></td>
                    <td><RadzenButton Click=@(args => deleteUser((string) user["id"])) Icon="delete" ButtonStyle="ButtonStyle.Light" /></td>
                    
                </tr>
            }
        </tbody>
    </table>
}

@code {

    FirestoreDb fireStoreDb;
    private string security_key_path = "wwwroot/klavis-4b8d1-eb6f81dfbefe.json";
    private string userID;
    private string terminal;
    private string terminalList;
    private string firstName;
    private string lastName;
    private string picturePath;
    private Google.Cloud.Firestore.Timestamp timestamp;
    private string connection = "Disconnected";
    private bool accessStatus;
    private bool accountStatus;
    private List<Dictionary<string, object>> users = null;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Connecting");
        string filepath = "wwwroot/klavis-4b8d1-eb6f81dfbefe.json";
        Environment.SetEnvironmentVariable("GOOGLE_APPLICATION_CREDENTIALS", filepath);
        fireStoreDb = FirestoreDb.Create("klavis-4b8d1");

        DocumentReference userRef = fireStoreDb.Collection("access").Document("designlab");
        DocumentSnapshot snapshot = await userRef.GetSnapshotAsync();
        if (snapshot.Exists)
        {
            connection = "Connected";
        }
        queryUsers();
        StateHasChanged();
    }

    async void queryUsers()
    {
        Google.Cloud.Firestore.Query userQuery = fireStoreDb.Collection("users");
        QuerySnapshot userQuerySnapshot = await userQuery.GetSnapshotAsync();
        List<Dictionary<string, object>> records = new List<Dictionary<string, object>>();
        foreach (DocumentSnapshot documentSnapshot in userQuerySnapshot.Documents)
        {
            Dictionary<string, object> recordDictionary = documentSnapshot.ToDictionary();
            recordDictionary.Add("id", documentSnapshot.Id);
            records.Add(recordDictionary);
        }
        users = records;
        StateHasChanged(); 

    }

    async void clearHistory()
    {
        QuerySnapshot snapshot = await fireStoreDb.Collection("history").Limit(64).GetSnapshotAsync();
        IReadOnlyList<DocumentSnapshot> documents = snapshot.Documents;
        while (documents.Count > 0)
        {
            foreach (DocumentSnapshot document in documents)
            {
                await document.Reference.DeleteAsync();
            }
            snapshot = await fireStoreDb.Collection("history").Limit(64).GetSnapshotAsync();
            documents = snapshot.Documents;
        }
        StateHasChanged();
    }

    async void addUser()
    {
        NavigationManager.NavigateTo("/adduser");
    }

    async void deleteUser(string id)
    {
        DocumentReference userRef = fireStoreDb.Collection("users").Document(id);
        await userRef.DeleteAsync();
    }
    async void editUser(string id)
    {
        NavigationManager.NavigateTo(("/edituser/"+id));
    }
}
