@page "/checkin"
@page "/"

@using Google.Cloud.Firestore;
@using System;

<PageTitle>Check In</PageTitle>

<div class="flex-row">
    <div class="flex-col">
        <h1>Check In</h1>
    </div>
    <div class="flex-col" style="margin-left: auto">
        <RadzenDropDown AllowClear="true" TValue="string" Class="flex-dropdown " 
                        Data=@terminals
                        Style="width: 40%; height: 2.5rem;"
                        @bind-Value=@terminal />
    </div>
</div>




<div class="flex-row" >
    
    <div class="flex-col">
        <RadzenCard Style="background-image: linear-gradient(0deg, #d1b4d4 20%, #eeeeee 25%);  margin: 10px; height: 300px;" >
            <div class="flex-image">
                <RadzenImage Path=@accessIcon   Style="width: 200px; height: 200px;"/>
            </div>
            
            <RadzenTextBox @bind-Value=@idField Type="password" MaxLength="8" Change=@(args => sendQuery(args, "designlab")) Class="w-100" />
        </RadzenCard>
        
    </div>
    <div class="flex-col">
        <RadzenCard Style="background-image: linear-gradient(0deg, #d1b4d4 20%, #eeeeee 25%);  margin: 10px; height: 300px;" >
            <div class="flex-image">
                <RadzenImage Path=@picturePath Class="rounded-circle"  Style="width: 200px; height: 200px;"/>
                
            </div>
            <div class = "flex-row">
                <div class = "col">
                    <b>Name:</b>
                    <b role="status">@(firstName+" "+lastName)</b>
                </div>
                <div class = "col">
                    <b>BUID: </b>
                    <b>@userID</b>
                </div>
                
                
            </div>
        </RadzenCard>
        
        
    </div>
</div>

<div class="flex-history">
    <RadzenCard Style="background-image: linear-gradient(180deg, #d1b4d4 100px, #eeeeee 125px);  margin: 10px;" >
        <History />
    </RadzenCard>
        
</div>





@code {
    FirestoreDb fireStoreDb;
    private string security_key_path = "wwwroot/klavis-4b8d1-eb6f81dfbefe.json";
    private string userID;
    private string idField;
    private string terminal;
    private string terminalList;
    private string firstName;
    private string lastName;
    private string picturePath = "user.png";
    private string accessPicturePath;
    private string accessIcon = "lock_outline";
    private string connection = "Disconnected";
    private bool accountStatus;
    private bool accessStatus;
    private List<string> terminals;




    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Connecting");
        string filepath = "wwwroot/klavis-4b8d1-eb6f81dfbefe.json";
        Environment.SetEnvironmentVariable("GOOGLE_APPLICATION_CREDENTIALS", filepath);
        fireStoreDb = FirestoreDb.Create("klavis-4b8d1");

        DocumentReference userRef = fireStoreDb.Collection("access").Document("designlab");
        DocumentSnapshot snapshot = await userRef.GetSnapshotAsync();
        if (snapshot.Exists)
        {
            connection = "Connected";
        }
        queryTerminals();
        StateHasChanged();
    }


    void OnError(UploadErrorEventArgs args, string name)
    {
        Console.WriteLine($"{args.Message}");
    }



    async void sendQuery(string id, string terminal)
    {
        if(id.Length == 8)
        {

            //Checkling User database
            DocumentReference userRef = fireStoreDb.Collection("users").Document(id);
            DocumentSnapshot snapshot = await userRef.GetSnapshotAsync();
            if (snapshot.Exists)
            {
                Dictionary<string, object> userDictionary = snapshot.ToDictionary();
                firstName = (string) userDictionary["firstname"];
                lastName = (string) userDictionary["lastname"];
                picturePath = (string) userDictionary["pictureLink"];
                accountStatus = (bool) userDictionary["accountStatus"];
                userID = id;
            }
            else
            {
                accountStatus = false;
                firstName = "User not found.";
                lastName = "";
                userID = id;
                picturePath = "user.png";
            }

            //Checking Access database
            userRef = fireStoreDb.Collection("access").Document(terminal).Collection("users").Document(id);
            snapshot = await userRef.GetSnapshotAsync();
            accessStatus = snapshot.Exists;

            if(accessStatus && accountStatus)
            {
                accessIcon = "check.png";
            }
            else
            {
                accessIcon = "x.png";
            }

            idField = "";
            StateHasChanged();

            //Logging request
            Dictionary<string, object> log = new Dictionary<string, object>
            {
                { "accessStatus",  accessStatus },
                { "accountStatus", accountStatus },
                { "id", userID },
                { "terminal", terminal },
                { "firstname", firstName },
                { "lastname", lastName },
                { "determination", (accessStatus && accountStatus) },
                { "timestamp", DateTime.UtcNow }
            };
            DocumentReference addedDocRef = await fireStoreDb.Collection("history").AddAsync(log);
        }


    }

    async void queryTerminals()
    {
        List<string> terms = new List<string>();
        CollectionReference terminalRef = fireStoreDb.Collection("access");
        QuerySnapshot userQuerySnapshot = await terminalRef.GetSnapshotAsync();
        foreach (DocumentSnapshot document in userQuerySnapshot.Documents)
        {
            terms.Add(document.Id);
        }
        terminals = terms;
        StateHasChanged();
    }
}