@page "/checkin"
@page "/"

@using Google.Cloud.Firestore;
@using System;

<PageTitle>Check In</PageTitle>

<div class="row">
    <h1>Check In   </h1>
</div>




<div class="row">

    <div class="col-xl-6">

        <RadzenCard >
            <div class="d-flex flex-row">
                <RadzenIcon Icon=@accessIcon />
                <RadzenImage Path=@picturePath Class="rounded-circle float-left mr-3" Style="width: 100px; height: 100px;" />
                <div>
                    <div>Name</div>
                    <b role="status">@(firstName+" "+lastName)</b>
                    <div class="mt-3">BUID</div>
                    <b>@userID</b>
                </div>
            </div>
        </RadzenCard>
        <RadzenCard>
            
            <RadzenTextBox @bind-Value=@idField MaxLength="8" Change=@(args => sendQuery(args, "designlab")) Class="w-100" />
            
        </RadzenCard>
    </div>
</div>





@code {
    FirestoreDb fireStoreDb;
    private string security_key_path = "wwwroot/klavis-4b8d1-eb6f81dfbefe.json";
    private string userID;
    private string idField;
    private string terminal = "designlab";
    private string terminalList;
    private string firstName;
    private string lastName;
    private string picturePath;
    private string accessPicturePath;
    private string accessIcon = "lock_outline";
    private string connection = "Disconnected";
    private bool accountStatus;
    private bool accessStatus;


    

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Connecting");
        string filepath = "wwwroot/klavis-4b8d1-eb6f81dfbefe.json";
        Environment.SetEnvironmentVariable("GOOGLE_APPLICATION_CREDENTIALS", filepath);
        fireStoreDb = FirestoreDb.Create("klavis-4b8d1");

        DocumentReference userRef = fireStoreDb.Collection("access").Document("designlab");
        DocumentSnapshot snapshot = await userRef.GetSnapshotAsync();
        if (snapshot.Exists)
        {
            connection = "Connected";
        }
        StateHasChanged();
    }


    void OnError(UploadErrorEventArgs args, string name)
    {
        Console.WriteLine($"{args.Message}");
    }



    async void sendQuery(string id, string terminal)
    {
        if(id.Length == 8)
        {
            
            //Checkling User database
            DocumentReference userRef = fireStoreDb.Collection("users").Document(id);
            DocumentSnapshot snapshot = await userRef.GetSnapshotAsync();
            if (snapshot.Exists)
            {
                Dictionary<string, object> userDictionary = snapshot.ToDictionary();
                firstName = (string) userDictionary["firstname"];
                lastName = (string) userDictionary["lastname"];
                picturePath = (string) userDictionary["pictureLink"];
                accountStatus = (bool) userDictionary["hascard"];
                userID = id;
            }
            else
            {
                accountStatus = false;
                firstName = "User not found.";
                lastName = "";
                picturePath = "https://img.search.brave.com/rsnQ2b5ZdZ5NqitJ3pIBqo_yylEga-fOE4uba4Zaq_8/rs:fit:512:512:1/g:ce/aHR0cHM6Ly9jcmlj/ZGFkZHkuY29tL3dw/LWNvbnRlbnQvdXBs/b2Fkcy8yMDIwLzA4/L2JsYW5rLXByb2Zp/bGUtcGljdHVyZS1w/bmcucG5n";
            }

            //Checking Access database
            userRef = fireStoreDb.Collection("access").Document(terminal).Collection("users").Document(id);
            snapshot = await userRef.GetSnapshotAsync();
            accessStatus = snapshot.Exists;

            if(accessStatus && accountStatus)
            {
                accessIcon = "lock_open";
            }
            else
            {
                accessIcon = "lock";
            }

            idField = "";
            StateHasChanged();
            
            //Logging request
            Dictionary<string, object> log = new Dictionary<string, object>
            {
                { "accessStatus",  accessStatus },
                { "accountStatus", accountStatus },
                { "id", userID },
                { "terminal", terminal },
                { "firstname", firstName },
                { "lastname", lastName },
                { "determination", (accessStatus && accountStatus) },
                { "timestamp", DateTime.UtcNow }
            };
            DocumentReference addedDocRef = await fireStoreDb.Collection("history").AddAsync(log);
        }


    }
}