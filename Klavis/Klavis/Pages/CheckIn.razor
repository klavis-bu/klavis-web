@page "/checkin"
@page "/"

@using Google.Cloud.Firestore;
@using System;

<PageTitle>Check In</PageTitle>

<div class="flex-row">
    <div class="flex-col">
        <h1>Check In</h1>
        <p>@connection</p>
    </div>
    <div class="flex-col" style="margin-left: auto">
        <RadzenDropDown AllowClear="true" TValue="string" Class="flex-dropdown " 
                        Data=@terminalList
                        Style="width: 40%; height: 2.5rem;"
                        @bind-Value=@current_terminal />
    </div>
</div>




<div class="flex-row" >
    
    <div class="flex-col">
        <RadzenCard Style="background-image: linear-gradient(0deg, #d1b4d4 20%, #eeeeee 25%);  margin: 10px; height: 300px;" >
            <div class="flex-image">
                <RadzenImage Path=@accessIcon   Style="width: 200px; height: 200px;"/>
            </div>
            
            <RadzenTextBox @bind-Value=@terminal_input Type="password" Change=@(args => execute(args, current_terminal)) Class="w-100" />
        </RadzenCard>
        
    </div>
    <div class="flex-col">
        <RadzenCard Style="background-image: linear-gradient(0deg, #d1b4d4 20%, #eeeeee 25%);  margin: 10px; height: 300px;" >
            <div class="flex-image">
                <RadzenImage Path=@picturePath Class="rounded-circle"  Style="width: 200px; height: 200px;"/>
                
            </div>
            <div class = "flex-row">
                <div class = "col">
                    <b>Name:</b>
                    <b role="status">@(firstName_label+" "+lastName_label)</b>
                </div>
                <div class = "col">
                    <b>BUID: </b>
                    <b>@userId_label</b>
                </div>
                
                
            </div>
        </RadzenCard>
        
        
    </div>
</div>

<div class="flex-history">

    <RadzenCard Style="background-image: linear-gradient(180deg, #d1b4d4 100px, #eeeeee 125px);  margin: 10px;" >
        <div class="flex-row">
            <div class="flex-controls">
                <p><b># Entries Displayed</b></p>
                <RadzenDropDown AllowClear="true" TValue="int" Class="flex-dropdown " 
                                Data=@dispnums
                                Style="width: 40%; height: 2.5rem
                                LoadData= ;"
                                @bind-Value=@displaysize />
            </div>
            <div class="flex-controls">
                <p><b>Location</b></p>
                <RadzenDropDown AllowClear="true" TValue="string" Class="flex-dropdown " 
                        Data=@terminalList
                        Style="width: 100%; height: 2.5rem;"
                        Change=@queryHistory
                        @bind-Value=@history_terminal />
            </div>

            <RadzenButton Click=@queryHistory Icon="refresh" ButtonStyle="ButtonStyle.Light" Style="margin-top: 15px;"/>
    
        </div>

        @if (accessHistory == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
    
            <div class = "row">
               <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>ID</th>
                        <th>Terminal</th>
                        <th>Timestamp</th>
                        <th>Determination</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int tablectr = 0; tablectr < displaysize; tablectr++)
                    {
                            @if (tablectr >= accessHistory.Count){ continue; }
                            <tr>
                                <td>@(accessHistory[tablectr]["firstname"] + " " + accessHistory[tablectr]["lastname"])</td>
                                <td>@accessHistory[tablectr]["id"]</td>
                                <td>@accessHistory[tablectr]["terminal"]</td>
                                <td>@accessHistory[tablectr]["timestamp"]</td>
                                <td>@accessHistory[tablectr]["determination"]</td>
                            </tr>
                    }
                </tbody>
            </table> 
            
            </div>
        }

    </RadzenCard>
        
</div>



@code {
    FirestoreDb fireStoreDb;
    private string security_key_path = "wwwroot/klavis-4b8d1-eb6f81dfbefe.json";
    private string userId_label;
    private string terminal_input;
    private string current_terminal;
    private string history_terminal;
    private string firstName_label;
    private string lastName_label;
    private string picturePath = "user.png";
    private string accessIcon = "loading-buffering.gif";
    private string connection = "Disconnected";
    private List<string> terminalList;

    private List<Dictionary<string, object>> accessHistory = null;
    private int[] dispnums = { 5, 10, 25 };
    private int displaysize = 10;

    private Dictionary<string, object> currentUser = new Dictionary<string, object>
        {
            {"id", ""},
            {"cardCreated", false},
            {"cardSerial", ""},
            {"created", null},
            {"email", ""},
            {"firstname", ""},
            {"lastname", ""},
            {"pictureLink", ""}
        };




    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Connecting");
        string filepath = "wwwroot/klavis-4b8d1-eb6f81dfbefe.json";
        Environment.SetEnvironmentVariable("GOOGLE_APPLICATION_CREDENTIALS", filepath);
        fireStoreDb = FirestoreDb.Create("klavis-4b8d1");
        queryTerminals();
        if(terminalList != null){ connection = "Connected"; }
        queryHistory();
        StateHasChanged();
    }


    void OnError(UploadErrorEventArgs args, string name)
    {
        Console.WriteLine($"{args.Message}");
    }

    void execute(string terminalInput, string terminalId)
    {
        string[] inputArgs = terminalInput.Split('|');
        string cardSerial = inputArgs[1];
        string userId = inputArgs[2];
        if(userId.Length == 8 && cardSerial.Length == 16 && terminalId != "")
        {
            sendQuery(userId, cardSerial, terminalId);
        }


    }

    async void sendQuery(string userId, string cardSerial, string terminalId)
    {
        bool determination = false;
        //Checkling User database
        DocumentReference userRef = fireStoreDb.Collection("users").Document(userId);
        DocumentSnapshot snapshot = await userRef.GetSnapshotAsync();
        if (snapshot.Exists)
        {

            currentUser = snapshot.ToDictionary();
            firstName_label = (string) currentUser["firstname"];
            lastName_label = (string) currentUser["lastname"];
            picturePath = (string) currentUser["pictureLink"];
            userId_label = userId;
            currentUser["id"] = userId;
            if((string) currentUser["cardSerial"] == cardSerial)
            {
                userRef = fireStoreDb.Collection("users").Document(userId).Collection("access").Document(terminalId);
                snapshot = await userRef.GetSnapshotAsync();
                if (snapshot.Exists)
                {
                    determination = true;
                    accessIcon = "check.png";
                }
                else
                {
                    accessIcon = "x.png";
                }
            }
        }
        else
        {
            currentUser["id"] = userId;
            currentUser["firstname"] = "User Not";
            currentUser["lastname"] = "Found";

            firstName_label = "User not found.";
            lastName_label = "";
            userId_label = "Invalid ID";
            accessIcon = "x.png";
            picturePath = "user.png";
        }

        terminal_input = "";

        logQuery(currentUser, terminalId, determination);
        StateHasChanged();

    }


    async void logQuery(Dictionary<string, object> user, string terminal, bool det)
    {
        //Logging request
        Dictionary<string, object> log = new Dictionary<string, object>
        {
            { "id", user["id"] },
            { "terminal", terminal },
            { "firstname", user["firstname"] },
            { "lastname", user["lastname"] },
            { "determination", det },
            { "timestamp", DateTime.UtcNow.ToString("mm/dd/yyyy , hh:mm:ss tt") }
        };
        DocumentReference addedDocRef = await fireStoreDb.Collection("history").AddAsync(log);
    }

    async void queryTerminals()
    {
        terminalList = new List<string>();
        CollectionReference terminalRef = fireStoreDb.Collection("access");
        QuerySnapshot userQuerySnapshot = await terminalRef.GetSnapshotAsync();
        foreach (DocumentSnapshot document in userQuerySnapshot.Documents)
        {
            terminalList.Add(document.Id);
        }
        StateHasChanged();
    }

    async void queryHistory()
    {
        int i = 0;
        Google.Cloud.Firestore.Query historyQuery = fireStoreDb.Collection("history").WhereEqualTo("terminal", history_terminal).OrderByDescending("timestamp");
        QuerySnapshot historyQuerySnapshot = await historyQuery.GetSnapshotAsync();
        List<Dictionary<string, object>> records = new List<Dictionary<string, object>>();
        foreach (DocumentSnapshot documentSnapshot in historyQuerySnapshot.Documents)
        {
            Dictionary<string, object> recordDictionary = documentSnapshot.ToDictionary();
            records.Add(recordDictionary);
        }
        accessHistory = records;
        StateHasChanged(); 


    }

    async void clearHistory()
    {
        QuerySnapshot snapshot = await fireStoreDb.Collection("history").Limit(64).GetSnapshotAsync();
        IReadOnlyList<DocumentSnapshot> documents = snapshot.Documents;
        while (documents.Count > 0)
        {
            foreach (DocumentSnapshot document in documents)
            {
                await document.Reference.DeleteAsync();
            }
            snapshot = await fireStoreDb.Collection("history").Limit(64).GetSnapshotAsync();
            documents = snapshot.Documents;
        }
        StateHasChanged();
    }
}